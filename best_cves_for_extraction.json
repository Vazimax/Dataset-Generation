[
  {
    "cve_id": "CVE-2016-0797",
    "project": "openssl",
    "description": "Multiple integer overflows in OpenSSL 1.0.1 before 1.0.1s and 1.0.2 before 1.0.2g allow remote attackers to cause a denial of service (heap memory corruption or NULL pointer dereference) or possibly have unspecified other impact via a long digit string that is mishandled by the (1) BN_dec2bn or (2) BN_hex2bn function, related to crypto/bn/bn.h and crypto/bn/bn_print.c.",
    "cvss_score": 7.5,
    "severity": "HIGH",
    "search_keyword": "openssl integer overflow",
    "published_date": "2016-03-03T20:59:01.813",
    "last_modified": "2025-04-12T10:46:40.837",
    "priority": "critical",
    "cwe": []
  },
  {
    "cve_id": "CVE-2016-2105",
    "project": "openssl",
    "description": "Integer overflow in the EVP_EncodeUpdate function in crypto/evp/encode.c in OpenSSL before 1.0.1t and 1.0.2 before 1.0.2h allows remote attackers to cause a denial of service (heap memory corruption) via a large amount of binary data.",
    "cvss_score": 7.5,
    "severity": "HIGH",
    "search_keyword": "openssl integer overflow",
    "published_date": "2016-05-05T01:59:01.200",
    "last_modified": "2025-04-12T10:46:40.837",
    "priority": "critical",
    "cwe": [
      "CWE-190"
    ]
  },
  {
    "cve_id": "CVE-2016-2106",
    "project": "openssl",
    "description": "Integer overflow in the EVP_EncryptUpdate function in crypto/evp/evp_enc.c in OpenSSL before 1.0.1t and 1.0.2 before 1.0.2h allows remote attackers to cause a denial of service (heap memory corruption) via a large amount of data.",
    "cvss_score": 7.5,
    "severity": "HIGH",
    "search_keyword": "openssl integer overflow",
    "published_date": "2016-05-05T01:59:02.217",
    "last_modified": "2025-04-12T10:46:40.837",
    "priority": "critical",
    "cwe": [
      "CWE-189"
    ]
  },
  {
    "cve_id": "CVE-2016-6303",
    "project": "openssl",
    "description": "Integer overflow in the MDC2_Update function in crypto/mdc2/mdc2dgst.c in OpenSSL before 1.1.0 allows remote attackers to cause a denial of service (out-of-bounds write and application crash) or possibly have unspecified other impact via unknown vectors.",
    "cvss_score": 9.8,
    "severity": "CRITICAL",
    "search_keyword": "openssl integer overflow",
    "published_date": "2016-09-16T05:59:13.363",
    "last_modified": "2025-04-12T10:46:40.837",
    "priority": "critical",
    "cwe": [
      "CWE-787"
    ]
  },
  {
    "cve_id": "CVE-2020-28018",
    "project": "openssl",
    "description": "Exim 4 before 4.94.2 allows Use After Free in smtp_reset in certain situations that may be common for builds with OpenSSL.",
    "cvss_score": 9.8,
    "severity": "CRITICAL",
    "search_keyword": "openssl use after free",
    "published_date": "2021-05-06T13:15:09.560",
    "last_modified": "2024-11-21T05:22:12.890",
    "priority": "critical",
    "cwe": [
      "CWE-416"
    ]
  },
  {
    "cve_id": "CVE-2023-35784",
    "project": "openssl",
    "description": "A double free or use after free could occur after SSL_clear in OpenBSD 7.2 before errata 026 and 7.3 before errata 004, and in LibreSSL before 3.6.3 and 3.7.x before 3.7.3. NOTE: OpenSSL is not affected.",
    "cvss_score": 9.8,
    "severity": "CRITICAL",
    "search_keyword": "openssl use after free",
    "published_date": "2023-06-16T20:15:09.493",
    "last_modified": "2024-11-21T08:08:41.820",
    "priority": "critical",
    "cwe": [
      "CWE-415",
      "CWE-416"
    ]
  },
  {
    "cve_id": "CVE-2024-4741",
    "project": "openssl",
    "description": "Issue summary: Calling the OpenSSL API function SSL_free_buffers may cause\nmemory to be accessed that was previously freed in some situations\n\nImpact summary: A use after free can have a range of potential consequences such\nas the corruption of valid data, crashes or execution of arbitrary code.\nHowever, only applications that directly call the SSL_free_buffers function are\naffected by this issue. Applications that do not call this function are not\nvulnerable. Our investigations indicate that this function is rarely used by\napplications.\n\nThe SSL_free_buffers function is used to free the internal OpenSSL buffer used\nwhen processing an incoming record from the network. The call is only expected\nto succeed if the buffer is not currently in use. However, two scenarios have\nbeen identified where the buffer is freed even when still in use.\n\nThe first scenario occurs where a record header has been received from the\nnetwork and processed by OpenSSL, but the full record body has not yet arrived.\nIn this case calling SSL_free_buffers will succeed even though a record has only\nbeen partially processed and the buffer is still in use.\n\nThe second scenario occurs where a full record containing application data has\nbeen received and processed by OpenSSL but the application has only read part of\nthis data. Again a call to SSL_free_buffers will succeed even though the buffer\nis still in use.\n\nWhile these scenarios could occur accidentally during normal operation a\nmalicious attacker could attempt to engineer a stituation where this occurs.\nWe are not aware of this issue being actively exploited.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
    "cvss_score": 7.5,
    "severity": "HIGH",
    "search_keyword": "openssl use after free",
    "published_date": "2024-11-13T11:15:04.480",
    "last_modified": "2024-11-13T17:01:16.850",
    "priority": "critical",
    "cwe": [
      "CWE-416"
    ]
  },
  {
    "cve_id": "CVE-2019-17571",
    "project": "log4j",
    "description": "Included in Log4j 1.2 is a SocketServer class that is vulnerable to deserialization of untrusted data which can be exploited to remotely execute arbitrary code when combined with a deserialization gadget when listening to untrusted network traffic for log data. This affects Log4j versions up to 1.2 up to 1.2.17.",
    "cvss_score": 9.8,
    "severity": "CRITICAL",
    "search_keyword": "log4j deserialization",
    "published_date": "2019-12-20T17:15:11.893",
    "last_modified": "2024-11-21T04:32:33.393",
    "priority": "critical",
    "cwe": [
      "CWE-502",
      "CWE-502"
    ]
  },
  {
    "cve_id": "CVE-2021-4104",
    "project": "log4j",
    "description": "JMSAppender in Log4j 1.2 is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration. The attacker can provide TopicBindingName and TopicConnectionFactoryBindingName configurations causing JMSAppender to perform JNDI requests that result in remote code execution in a similar fashion to CVE-2021-44228. Note this issue only affects Log4j 1.2 when specifically configured to use JMSAppender, which is not the default. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.",
    "cvss_score": 7.5,
    "severity": "HIGH",
    "search_keyword": "log4j deserialization",
    "published_date": "2021-12-14T12:15:12.200",
    "last_modified": "2024-11-21T06:36:54.560",
    "priority": "critical",
    "cwe": [
      "CWE-502",
      "CWE-502"
    ]
  },
  {
    "cve_id": "CVE-2022-23302",
    "project": "log4j",
    "description": "JMSSink in all versions of Log4j 1.x is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration or if the configuration references an LDAP service the attacker has access to. The attacker can provide a TopicConnectionFactoryBindingName configuration causing JMSSink to perform JNDI requests that result in remote code execution in a similar fashion to CVE-2021-4104. Note this issue only affects Log4j 1.x when specifically configured to use JMSSink, which is not the default. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.",
    "cvss_score": 8.8,
    "severity": "HIGH",
    "search_keyword": "log4j deserialization",
    "published_date": "2022-01-18T16:15:08.300",
    "last_modified": "2025-07-07T18:15:24.713",
    "priority": "critical",
    "cwe": [
      "CWE-502",
      "CWE-502"
    ]
  },
  {
    "cve_id": "CVE-2022-23307",
    "project": "log4j",
    "description": "CVE-2020-9493 identified a deserialization issue that was present in Apache Chainsaw. Prior to Chainsaw V2.0 Chainsaw was a component of Apache Log4j 1.2.x where the same issue exists.",
    "cvss_score": 8.8,
    "severity": "HIGH",
    "search_keyword": "log4j deserialization",
    "published_date": "2022-01-18T16:15:08.403",
    "last_modified": "2024-11-21T06:48:22.733",
    "priority": "critical",
    "cwe": [
      "CWE-502",
      "CWE-502"
    ]
  },
  {
    "cve_id": "CVE-2022-24818",
    "project": "log4j",
    "description": "GeoTools is an open source Java library that provides tools for geospatial data. The GeoTools library has a number of data sources that can perform unchecked JNDI lookups, which in turn can be used to perform class deserialization and result in arbitrary code execution. Similar to the Log4J case, the vulnerability can be triggered if the JNDI names are user-provided, but requires admin-level login to be triggered. The lookups are now restricted in GeoTools 26.4, GeoTools 25.6, and GeoTools 24.6. Users unable to upgrade should ensure that any downstream application should not allow usage of remotely provided JNDI strings.",
    "cvss_score": 8.2,
    "severity": "HIGH",
    "search_keyword": "log4j deserialization",
    "published_date": "2022-04-13T21:15:07.753",
    "last_modified": "2024-11-21T06:51:09.987",
    "priority": "critical",
    "cwe": [
      "CWE-20",
      "CWE-917"
    ]
  },
  {
    "cve_id": "CVE-2021-45046",
    "project": "log4j",
    "description": "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments and local code execution in all environments. Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default.",
    "cvss_score": 9.0,
    "severity": "CRITICAL",
    "search_keyword": "log4j remote code execution",
    "published_date": "2021-12-14T19:15:07.733",
    "last_modified": "2025-03-12T19:52:00.270",
    "priority": "critical",
    "cwe": [
      "CWE-917",
      "CWE-917"
    ]
  },
  {
    "cve_id": "CVE-2022-37434",
    "project": "zlib",
    "description": "zlib through 1.2.12 has a heap-based buffer over-read or buffer overflow in inflate in inflate.c via a large gzip header extra field. NOTE: only applications that call inflateGetHeader are affected. Some common applications bundle the affected zlib source code but may be unable to call inflateGetHeader (e.g., see the nodejs/node reference).",
    "cvss_score": 9.8,
    "severity": "CRITICAL",
    "search_keyword": "zlib buffer overflow",
    "published_date": "2022-08-05T07:15:07.240",
    "last_modified": "2025-05-30T20:15:30.030",
    "priority": "high",
    "cwe": [
      "CWE-787",
      "CWE-120"
    ]
  },
  {
    "cve_id": "CVE-2022-1922",
    "project": "zlib",
    "description": "DOS / potential heap overwrite in mkv demuxing using zlib decompression. Integer overflow in matroskademux element in gst_matroska_decompress_data function which causes a segfault, or could cause a heap overwrite, depending on libc and OS. Depending on the libc used, and the underlying OS capabilities, it could be just a segfault or a heap overwrite. If the libc uses mmap for large chunks, and the OS supports mmap, then it is just a segfault (because the realloc before the integer overflow will use mremap to reduce the size of the chunk, and it will start to write to unmapped memory). However, if using a libc implementation that does not use mmap, or if the OS does not support mmap while using libc, then this could result in a heap overwrite.",
    "cvss_score": 7.8,
    "severity": "HIGH",
    "search_keyword": "zlib integer overflow",
    "published_date": "2022-07-19T20:15:10.907",
    "last_modified": "2024-11-21T06:41:45.477",
    "priority": "high",
    "cwe": [
      "CWE-122",
      "CWE-190"
    ]
  },
  {
    "cve_id": "CVE-2022-2122",
    "project": "zlib",
    "description": "DOS / potential heap overwrite in qtdemux using zlib decompression. Integer overflow in qtdemux element in qtdemux_inflate function which causes a segfault, or could cause a heap overwrite, depending on libc and OS. Depending on the libc used, and the underlying OS capabilities, it could be just a segfault or a heap overwrite.",
    "cvss_score": 7.8,
    "severity": "HIGH",
    "search_keyword": "zlib integer overflow",
    "published_date": "2022-07-19T20:15:11.140",
    "last_modified": "2024-11-21T07:00:21.457",
    "priority": "high",
    "cwe": [
      "CWE-122",
      "CWE-190",
      "CWE-787"
    ]
  },
  {
    "cve_id": "CVE-2023-45853",
    "project": "zlib",
    "description": "MiniZip in zlib through 1.3 has an integer overflow and resultant heap-based buffer overflow in zipOpenNewFileInZip4_64 via a long filename, comment, or extra field. NOTE: MiniZip is not a supported part of the zlib product. NOTE: pyminizip through 0.2.6 is also vulnerable because it bundles an affected zlib version, and exposes the applicable MiniZip code through its compress API.",
    "cvss_score": 9.8,
    "severity": "CRITICAL",
    "search_keyword": "zlib integer overflow",
    "published_date": "2023-10-14T02:15:09.323",
    "last_modified": "2024-12-20T17:41:31.237",
    "priority": "high",
    "cwe": [
      "CWE-190",
      "CWE-190"
    ]
  },
  {
    "cve_id": "CVE-2023-35989",
    "project": "zlib",
    "description": "An integer overflow vulnerability exists in the LXT2 zlib block allocation functionality of GTKWave 3.3.115. A specially crafted .lxt2 file can lead to arbitrary code execution. A victim would need to open a malicious file to trigger this vulnerability.",
    "cvss_score": 7.8,
    "severity": "HIGH",
    "search_keyword": "zlib integer overflow",
    "published_date": "2024-01-08T15:15:12.800",
    "last_modified": "2024-11-21T08:09:07.213",
    "priority": "high",
    "cwe": [
      "CWE-190",
      "CWE-190"
    ]
  },
  {
    "cve_id": "CVE-2005-0490",
    "project": "curl",
    "description": "Multiple stack-based buffer overflows in libcURL and cURL 7.12.1, and possibly other versions, allow remote malicious web servers to execute arbitrary code via base64 encoded replies that exceed the intended buffer lengths when decoded, which is not properly handled by (1) the Curl_input_ntlm function in http_ntlm.c during NTLM authentication or (2) the Curl_krb_kauth and krb4_auth functions in krb4.c during Kerberos authentication.",
    "cvss_score": 8.8,
    "severity": "HIGH",
    "search_keyword": "curl buffer overflow",
    "published_date": "2005-05-02T04:00:00.000",
    "last_modified": "2025-04-03T01:03:51.193",
    "priority": "high",
    "cwe": [
      "CWE-131"
    ]
  },
  {
    "cve_id": "CVE-2016-7134",
    "project": "curl",
    "description": "ext/curl/interface.c in PHP 7.x before 7.0.10 does not work around a libcurl integer overflow, which allows remote attackers to cause a denial of service (allocation error and heap-based buffer overflow) or possibly have unspecified other impact via a long string that is mishandled in a curl_escape call.",
    "cvss_score": 9.8,
    "severity": "CRITICAL",
    "search_keyword": "curl integer overflow",
    "published_date": "2016-09-12T01:59:12.803",
    "last_modified": "2025-04-12T10:46:40.837",
    "priority": "high",
    "cwe": [
      "CWE-119"
    ]
  },
  {
    "cve_id": "CVE-2016-7167",
    "project": "curl",
    "description": "Multiple integer overflows in the (1) curl_escape, (2) curl_easy_escape, (3) curl_unescape, and (4) curl_easy_unescape functions in libcurl before 7.50.3 allow attackers to have unspecified impact via a string of length 0xffffffff, which triggers a heap-based buffer overflow.",
    "cvss_score": 9.8,
    "severity": "CRITICAL",
    "search_keyword": "curl integer overflow",
    "published_date": "2016-10-07T14:59:08.100",
    "last_modified": "2025-04-12T10:46:40.837",
    "priority": "high",
    "cwe": [
      "CWE-190"
    ]
  },
  {
    "cve_id": "CVE-2018-14618",
    "project": "curl",
    "description": "curl before version 7.61.1 is vulnerable to a buffer overrun in the NTLM authentication code. The internal function Curl_ntlm_core_mk_nt_hash multiplies the length of the password by two (SUM) to figure out how large temporary storage area to allocate from the heap. The length value is then subsequently used to iterate over the password and generate output into the allocated storage buffer. On systems with a 32 bit size_t, the math to calculate SUM triggers an integer overflow when the password length exceeds 2GB (2^31 bytes). This integer overflow usually causes a very small buffer to actually get allocated instead of the intended very huge one, making the use of that buffer end up in a heap buffer overflow. (This bug is almost identical to CVE-2017-8816.)",
    "cvss_score": 7.5,
    "severity": "HIGH",
    "search_keyword": "curl integer overflow",
    "published_date": "2018-09-05T19:29:00.420",
    "last_modified": "2024-11-21T03:49:26.003",
    "priority": "high",
    "cwe": [
      "CWE-122",
      "CWE-131",
      "CWE-190"
    ]
  },
  {
    "cve_id": "CVE-2023-28319",
    "project": "curl",
    "description": "A use after free vulnerability exists in curl <v8.1.0 in the way libcurl offers a feature to verify an SSH server's public key using a SHA 256 hash. When this check fails, libcurl would free the memory for the fingerprint before it returns an error message containing the (now freed) hash. This flaw risks inserting sensitive heap-based data into the error message that might be shown to users or otherwise get leaked and revealed.",
    "cvss_score": 7.5,
    "severity": "HIGH",
    "search_keyword": "curl use after free",
    "published_date": "2023-05-26T21:15:10.020",
    "last_modified": "2025-01-15T16:15:25.690",
    "priority": "high",
    "cwe": [
      "CWE-416",
      "CWE-416"
    ]
  },
  {
    "cve_id": "CVE-2017-5130",
    "project": "libxml2",
    "description": "An integer overflow in xmlmemory.c in libxml2 before 2.9.5, as used in Google Chrome prior to 62.0.3202.62 and other products, allowed a remote attacker to potentially exploit heap corruption via a crafted XML file.",
    "cvss_score": 8.8,
    "severity": "HIGH",
    "search_keyword": "libxml2 integer overflow",
    "published_date": "2018-02-07T23:29:01.420",
    "last_modified": "2024-11-21T03:27:07.187",
    "priority": "high",
    "cwe": [
      "CWE-787"
    ]
  },
  {
    "cve_id": "CVE-2017-15412",
    "project": "libxml2",
    "description": "Use after free in libxml2 before 2.9.5, as used in Google Chrome prior to 63.0.3239.84 and other products, allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page.",
    "cvss_score": 8.8,
    "severity": "HIGH",
    "search_keyword": "libxml2 use after free",
    "published_date": "2018-08-28T19:29:05.737",
    "last_modified": "2024-11-21T03:14:39.487",
    "priority": "high",
    "cwe": [
      "CWE-416"
    ]
  },
  {
    "cve_id": "CVE-2018-20346",
    "project": "sqlite",
    "description": "SQLite before 3.25.3, when the FTS3 extension is enabled, encounters an integer overflow (and resultant buffer overflow) for FTS3 queries that occur after crafted changes to FTS3 shadow tables, allowing remote attackers to execute arbitrary code by leveraging the ability to run arbitrary SQL statements (such as in certain WebSQL use cases), aka Magellan.",
    "cvss_score": 8.1,
    "severity": "HIGH",
    "search_keyword": "sqlite integer overflow",
    "published_date": "2018-12-21T21:29:00.243",
    "last_modified": "2024-11-21T04:01:17.200",
    "priority": "high",
    "cwe": [
      "CWE-190"
    ]
  },
  {
    "cve_id": "CVE-2018-20506",
    "project": "sqlite",
    "description": "SQLite before 3.25.3, when the FTS3 extension is enabled, encounters an integer overflow (and resultant buffer overflow) for FTS3 queries in a \"merge\" operation that occurs after crafted changes to FTS3 shadow tables, allowing remote attackers to execute arbitrary code by leveraging the ability to run arbitrary SQL statements (such as in certain WebSQL use cases). This is a different vulnerability than CVE-2018-20346.",
    "cvss_score": 8.1,
    "severity": "HIGH",
    "search_keyword": "sqlite integer overflow",
    "published_date": "2019-04-03T18:29:01.313",
    "last_modified": "2024-11-21T04:01:37.740",
    "priority": "high",
    "cwe": [
      "CWE-190"
    ]
  },
  {
    "cve_id": "CVE-2019-5827",
    "project": "sqlite",
    "description": "Integer overflow in SQLite via WebSQL in Google Chrome prior to 74.0.3729.131 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page.",
    "cvss_score": 8.8,
    "severity": "HIGH",
    "search_keyword": "sqlite integer overflow",
    "published_date": "2019-06-27T17:15:14.913",
    "last_modified": "2024-11-21T04:45:35.437",
    "priority": "high",
    "cwe": [
      "CWE-190",
      "CWE-787"
    ]
  },
  {
    "cve_id": "CVE-2014-4959",
    "project": "sqlite",
    "description": "**DISPUTED** SQL injection vulnerability in SQLiteDatabase.java in the SQLi Api in Android allows remote attackers to execute arbitrary SQL commands via the delete method.",
    "cvss_score": 9.8,
    "severity": "CRITICAL",
    "search_keyword": "sqlite injection",
    "published_date": "2018-03-27T16:29:00.280",
    "last_modified": "2024-11-21T02:11:10.480",
    "priority": "high",
    "cwe": [
      "CWE-89"
    ]
  },
  {
    "cve_id": "CVE-2016-10556",
    "project": "sqlite",
    "description": "sequelize is an Object-relational mapping, or a middleman to convert things from Postgres, MySQL, MariaDB, SQLite and Microsoft SQL Server into usable data for NodeJS In Postgres, SQLite, and Microsoft SQL Server there is an issue where arrays are treated as strings and improperly escaped. This causes potential SQL injection in sequelize 3.19.3 and earlier, where a malicious user could put `[\"test\", \"'); DELETE TestTable WHERE Id = 1 --')\"]` inside of ``` database.query('SELECT * FROM TestTable WHERE Name IN (:names)', { replacements: { names: directCopyOfUserInput } }); ``` and cause the SQL statement to become `SELECT Id FROM Table WHERE Name IN ('test', '\\'); DELETE TestTable WHERE Id = 1 --')`. In Postgres, MSSQL, and SQLite, the backslash has no special meaning. This causes the the statement to delete whichever Id has a value of 1 in the TestTable table.",
    "cvss_score": 7.5,
    "severity": "HIGH",
    "search_keyword": "sqlite injection",
    "published_date": "2018-05-29T20:29:00.750",
    "last_modified": "2024-11-21T02:44:16.250",
    "priority": "high",
    "cwe": [
      "CWE-89",
      "CWE-89"
    ]
  },
  {
    "cve_id": "CVE-2016-10553",
    "project": "sqlite",
    "description": "sequelize is an Object-relational mapping, or a middleman to convert things from Postgres, MySQL, MariaDB, SQLite and Microsoft SQL Server into usable data for NodeJS. A fix was pushed out that fixed potential SQL injection in sequelize 2.1.3 and earlier.",
    "cvss_score": 9.8,
    "severity": "CRITICAL",
    "search_keyword": "sqlite injection",
    "published_date": "2018-05-31T20:29:01.970",
    "last_modified": "2024-11-21T02:44:15.930",
    "priority": "high",
    "cwe": [
      "CWE-89",
      "CWE-89"
    ]
  }
]